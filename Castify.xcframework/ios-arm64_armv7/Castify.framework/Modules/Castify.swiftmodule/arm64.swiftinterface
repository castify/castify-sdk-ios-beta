// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Castify
import AVFoundation
@_exported import Castify
import CoreGraphics
import CoreMedia
import Foundation
import Swift
import UIKit
@objc public class Player : ObjectiveC.NSObject {
  weak public var delegate: Castify.PlayerDelegate?
  final public let audioOutput: Castify.AudioOutput
  final public let videoOutput: Castify.VideoOutput
  public var connectivity: Castify.Connectivity {
    get
  }
  public var isAudioEnabled: Swift.Bool {
    get
    set
  }
  public var isVideoEnabled: Swift.Bool {
    get
    set
  }
  public var mediaSelector: Castify.MediaSelector? {
    get
    set
  }
  public init(_ app: Castify.CastifyApp, config: Castify.PlayerConfig = .init())
  @objc deinit
  public var source: Castify.Source? {
    get
    set
  }
  public func seek(to time: Foundation.TimeInterval? = nil)
  public var paused: Swift.Bool {
    get
    set
  }
  @objc override dynamic public init()
}
public struct BroadcasterConfig : Swift.Codable {
  public var autoReconnect: Swift.Bool
  public init(autoReconnect: Swift.Bool = true)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum BroadcastRequest {
  case new(customData: Swift.String? = nil)
  case existing(broadcastId: Swift.String, token: Swift.String)
}
@_hasMissingDesignatedInitializers public class AudioOutput {
  weak public var delegate: Castify.AudioOutputDelegate?
  @objc deinit
}
public protocol AudioOutputDelegate : AnyObject {
}
public struct CastifyAppConfig : Swift.Codable {
  public var restAPI: Swift.String
  public var edgeAPI: Swift.String
  public var edgeCDN: Swift.String
  public static let production: Castify.CastifyAppConfig
  public static func forDevelopment(namespace ns: Swift.String) -> Castify.CastifyAppConfig
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol AudioEncoderSetting {
  var JSON: Any { get }
}
public struct AACEncoderSetting : Castify.AudioEncoderSetting {
  public var bps: Swift.UInt
  public var samplingRate: Swift.UInt
  public var channelCount: Swift.UInt
  public init(bps: Swift.UInt = 0, samplingRate: Swift.UInt = 0, channelCount: Swift.UInt = 0)
  public var JSON: Any {
    get
  }
}
public protocol VideoEncoderSetting {
  var JSON: Any { get }
}
public struct H264EncoderSetting : Castify.VideoEncoderSetting {
  public enum Profile : Swift.Int32 {
    case baseline
    case main
    case high
    public typealias RawValue = Swift.Int32
    public init?(rawValue: Swift.Int32)
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var bps: Swift.Double
  public var fps: Swift.Double
  public var keyFrameInterval: Swift.Double
  public var dimension: CoreGraphics.CGSize?
  public var profile: Castify.H264EncoderSetting.Profile
  public init(bps: Swift.Double, fps: Swift.Double = 30, keyFrameInterval: Swift.Double = 1, dimension: CoreGraphics.CGSize? = nil, profile: Castify.H264EncoderSetting.Profile = .baseline)
  public static func preferredSetting(forResolution resolution: CoreGraphics.CGSize) -> Castify.H264EncoderSetting
  public var JSON: Any {
    get
  }
}
public struct Microphone {
  public init()
}
extension Microphone : Castify.AudioSource {
  public var JSON: Any {
    get
  }
}
public class CastifyApp {
  final public let config: Castify.CastifyAppConfig
  final public let token: Swift.String
  public init(token: Swift.String, config: Castify.CastifyAppConfig = .production)
  @objc deinit
  public func publicPreviewURL(ofBroadcastId id: Swift.String, name: Swift.String = "index") -> Foundation.URL
  public static var loggingOption: Castify.LoggingOption? {
    get
    set
  }
}
public struct LoggingOption : Swift.Codable {
  public enum Level : Swift.UInt, Swift.Codable {
    case debug
    case info
    case warn
    case error
    public typealias RawValue = Swift.UInt
    public init?(rawValue: Swift.UInt)
    public var rawValue: Swift.UInt {
      get
    }
  }
  public var level: Castify.LoggingOption.Level
  public init(level: Castify.LoggingOption.Level)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PreviewView : UIKit.UIView, Castify.VideoOutputDelegate {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public var resizeMode: Castify.ResizeMode {
    get
    set
  }
  public var align: CoreGraphics.CGPoint {
    get
    set
  }
  @objc override dynamic public func layoutSubviews()
  public func on(video sampleBuffer: CoreMedia.CMSampleBuffer)
  @objc deinit
}
public enum Connectivity {
  case wip
  case opened
  case closed(cause: Castify.CastifyError?)
}
public struct Camera {
  public var deviceId: Swift.String
  public var resolution: CoreGraphics.CGSize
  public var rotation: AVFoundation.AVCaptureVideoOrientation
  public var cropping: Swift.Bool
  public init(device: AVFoundation.AVCaptureDevice)
  public init?(position: AVFoundation.AVCaptureDevice.Position)
}
extension Camera : Castify.VideoSource {
  public var JSON: Any {
    get
  }
}
public struct CastifyError : Swift.Error {
  public enum Kind {
    case unknown
    case runtime
    case validation
    case webhook(reply: Swift.String)
    case defined(label: Swift.String)
  }
  public var kind: Castify.CastifyError.Kind
  public var note: Swift.String
  public var info: [Swift.String : Swift.String]
}
public protocol BroadcasterDelegate : AnyObject {
  func on(event: Castify.BroadcasterEvent, from host: Castify.Broadcaster)
}
public enum BroadcasterEvent {
  case connectivityUpdated(state: Castify.Connectivity)
  case broadcastCreated(broadcast: Castify.Broadcast)
  case fatalError(cause: Castify.CastifyError?)
}
public struct AudioFile {
  public var path: Swift.String
  public init(path: Swift.String)
}
extension AudioFile : Castify.AudioSource {
  public var JSON: Any {
    get
  }
}
public struct AudioMixFilter<A, B> where A : Castify.AudioSource, B : Castify.AudioSource {
  public var _1: A
  public var _2: B
}
extension AudioMixFilter : Castify.AudioSource {
  public var JSON: Any {
    get
  }
}
public func + <A, B>(lhs: A, rhs: B) -> Castify.AudioMixFilter<A, B> where A : Castify.AudioSource, B : Castify.AudioSource
public struct AudioAmpFilter<Base> where Base : Castify.AudioSource {
  public var base: Base
  public var gain: Swift.Double
  public init(base: Base, gain: Swift.Double = 1.0)
}
extension AudioAmpFilter : Castify.AudioSource {
  public var JSON: Any {
    get
  }
}
extension AudioSource {
  public func with(gain: Swift.Double) -> Castify.AudioAmpFilter<Self>
}
public protocol VideoSource {
  var JSON: Any { get }
}
public struct PlayerConfig : Swift.Codable {
  public var lowLatency: Swift.Bool
  public init(lowLatency: Swift.Bool = true)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum MediaSelector {
  case auto
  case name(Swift.String)
}
public class VideoPublisher {
  public init(_ app: Castify.CastifyApp)
  @objc deinit
  public func publish(_ frame: CoreMedia.CMSampleBuffer)
}
extension VideoPublisher : Castify.VideoSource {
  public var JSON: Any {
    get
  }
}
public class Source {
  public init(_ app: Castify.CastifyApp, broadcast id: Swift.String, options: Castify.PlayOptions = .init())
  public func load(completion: @escaping (Swift.Result<Castify.SourceInfo, Swift.Error>) -> Swift.Void)
  @objc deinit
}
public struct PlayOptions {
  public var key: Swift.String?
  public var val: Swift.String?
  public var name: Swift.String?
  public init(key: Swift.String? = UUID().uuidString, val: Swift.String? = nil, name: Swift.String? = nil)
}
public protocol PlayerDelegate : AnyObject {
  func on(event: Castify.PlayerEvent, from host: Castify.Player)
}
public enum PlayerEvent {
  case connectivityUpdated(state: Castify.Connectivity)
  case fatalError(cause: Castify.CastifyError?)
  case timer(Foundation.TimeInterval)
}
public struct SourceInfo : Swift.Codable {
  public var startedAt: Swift.Int64
  public var stoppedAt: Swift.Int64?
  public var mediaStart: Foundation.TimeInterval?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum ResizeMode {
  case cover
  case stretch
  case contain
  public static func == (a: Castify.ResizeMode, b: Castify.ResizeMode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public class Broadcaster : ObjectiveC.NSObject {
  weak public var delegate: Castify.BroadcasterDelegate?
  final public let audioOutput: Castify.AudioOutput
  final public let videoOutput: Castify.VideoOutput
  public var audio: Castify.AudioSource? {
    get
    set
  }
  public var video: Castify.VideoSource? {
    get
    set
  }
  public var audioEncoderSetting: Castify.AudioEncoderSetting? {
    get
    set
  }
  public var videoEncoderSetting: Castify.VideoEncoderSetting? {
    get
    set
  }
  public var connectivity: Castify.Connectivity {
    get
  }
  public var broadcast: Castify.Broadcast? {
    get
  }
  public init(_ app: Castify.CastifyApp, config: Castify.BroadcasterConfig = .init())
  @objc deinit
  public func resume(request: Castify.BroadcastRequest = .new())
  public func pause()
  @objc override dynamic public init()
}
public struct Broadcast : Swift.Codable {
  public var id: Swift.String
  public var token: Swift.String
  public init(id: Swift.String)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol AudioSource {
  var JSON: Any { get }
}
@_hasMissingDesignatedInitializers public class VideoOutput {
  weak public var delegate: Castify.VideoOutputDelegate?
  @objc deinit
}
public protocol VideoOutputDelegate : AnyObject {
  func on(video sampleBuffer: CoreMedia.CMSampleBuffer)
}
public class AudioPublisher {
  public init(_ app: Castify.CastifyApp)
  @objc deinit
  public func publish(_ frame: CoreMedia.CMSampleBuffer)
}
extension AudioPublisher : Castify.AudioSource {
  public var JSON: Any {
    get
  }
}
extension Castify.H264EncoderSetting.Profile : Swift.Equatable {}
extension Castify.H264EncoderSetting.Profile : Swift.Hashable {}
extension Castify.H264EncoderSetting.Profile : Swift.RawRepresentable {}
extension Castify.LoggingOption.Level : Swift.Equatable {}
extension Castify.LoggingOption.Level : Swift.Hashable {}
extension Castify.LoggingOption.Level : Swift.RawRepresentable {}
extension Castify.ResizeMode : Swift.Equatable {}
extension Castify.ResizeMode : Swift.Hashable {}
